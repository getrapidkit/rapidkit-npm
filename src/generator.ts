export interface ProjectConfig {
  projectName: string;
  framework: 'fastapi-standard' | 'fastapi-advanced' | 'nestjs-standard' | 'nestjs-advanced';
  pythonVersion: '3.10' | '3.11' | '3.12';
  packageManager: 'poetry' | 'pip' | 'npm';
  selectedModules: string[];
  includeDocker: boolean;
  includeTesting: boolean;
  includeCI: boolean;
}

export function generateProjectFiles(config: ProjectConfig): Record<string, string> {
  const files: Record<string, string> = {};
  const isFastAPI = config.framework.startsWith('fastapi');

  // README.md
  files['README.md'] = generateReadme(config);

  // .gitignore
  files['.gitignore'] = generateGitignore();

  // .env.example
  files['.env.example'] = generateEnvExample(config);

  if (isFastAPI) {
    // Python-specific files
    if (config.packageManager === 'poetry') {
      files['pyproject.toml'] = generatePyProjectToml(config);
    } else {
      files['requirements.txt'] = generateRequirementsTxt(config);
      files['setup.py'] = generateSetupPy(config);
    }

    // Main application file
    files['src/__init__.py'] = '';
    files['src/main.py'] = generateMainPy(config);
    files['src/config.py'] = generateConfigPy(config);

    // Core modules
    files['src/core/__init__.py'] = '';
    files['src/core/database.py'] = generateDatabasePy(config);
    files['src/core/dependencies.py'] = generateDependenciesPy(config);

    // API folder
    files['src/api/__init__.py'] = '';
    files['src/api/routes.py'] = generateRoutesPy(config);

    // Modules based on selection
    config.selectedModules.forEach((moduleSlug) => {
      const moduleFiles = generateModuleFiles(moduleSlug, config);
      Object.entries(moduleFiles).forEach(([path, content]) => {
        files[path] = content;
      });
    });
  } else {
    // NestJS-specific files
    files['package.json'] = generatePackageJson(config);
    files['tsconfig.json'] = generateTsConfig();
    files['nest-cli.json'] = generateNestCliJson();
    files['src/main.ts'] = generateMainTs(config);
    files['src/app.module.ts'] = generateAppModule(config);
    files['src/app.controller.ts'] = generateAppController();
    files['src/app.service.ts'] = generateAppService();
  }

  // Docker files
  if (config.includeDocker) {
    files['Dockerfile'] = generateDockerfile(config);
    files['docker-compose.yml'] = generateDockerCompose(config);
    files['.dockerignore'] = generateDockerignore();
  }

  // Testing files
  if (config.includeTesting) {
    if (isFastAPI) {
      files['tests/__init__.py'] = '';
      files['tests/conftest.py'] = generateConftestPy(config);
      files['tests/test_main.py'] = generateTestMainPy(config);
      files['pytest.ini'] = generatePytestIni();
    } else {
      files['test/app.e2e-spec.ts'] = generateE2ETest();
      files['test/jest-e2e.json'] = generateJestE2EConfig();
    }
  }

  // CI/CD files
  if (config.includeCI) {
    files['.github/workflows/ci.yml'] = generateGitHubActions(config);
  }

  return files;
}

// Template generators
function generateReadme(config: ProjectConfig): string {
  return `# ${config.projectName}

Generated by [RapidKit](https://rapidkit.dev)

## Description

A production-ready ${config.framework} project with Clean Architecture patterns.

## Features

${config.selectedModules.map((m) => `- ${m}`).join('\n')}

## Prerequisites

${
  config.framework.startsWith('fastapi')
    ? `- Python ${config.pythonVersion}+
- ${config.packageManager === 'poetry' ? 'Poetry' : 'pip'}`
    : '- Node.js 18+\n- npm or yarn'
}

## Installation

\`\`\`bash
${
  config.framework.startsWith('fastapi')
    ? config.packageManager === 'poetry'
      ? 'poetry install'
      : 'pip install -r requirements.txt'
    : 'npm install'
}
\`\`\`

## Configuration

Copy \`.env.example\` to \`.env\` and update the values:

\`\`\`bash
cp .env.example .env
\`\`\`

## Running the Application

### Development Mode

\`\`\`bash
${
  config.framework.startsWith('fastapi')
    ? config.packageManager === 'poetry'
      ? 'poetry run uvicorn src.main:app --reload'
      : 'uvicorn src.main:app --reload'
    : 'npm run start:dev'
}
\`\`\`

${
  config.includeDocker
    ? `### Using Docker

\`\`\`bash
docker-compose up
\`\`\`
`
    : ''
}

## API Documentation

Once running, visit:
- Swagger UI: http://localhost:8000/docs
- ReDoc: http://localhost:8000/redoc

## Testing

\`\`\`bash
${
  config.framework.startsWith('fastapi')
    ? config.packageManager === 'poetry'
      ? 'poetry run pytest'
      : 'pytest'
    : 'npm run test'
}
\`\`\`

## Project Structure

\`\`\`
${config.projectName}/
├── src/
│   ├── main.${config.framework.startsWith('fastapi') ? 'py' : 'ts'}
│   ├── api/
│   ├── core/
${config.selectedModules.map((m) => `│   ├── ${m}/`).join('\n')}
│   └── ...
${config.includeTesting ? '├── tests/\n' : ''}${config.includeDocker ? '├── Dockerfile\n├── docker-compose.yml\n' : ''}└── README.md
\`\`\`

## License

MIT

## Support

For issues and questions, visit [RapidKit GitHub](https://github.com/getrapidkit/community)
`;
}

function generateGitignore(): string {
  return `# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual environments
venv/
ENV/
env/
.venv

# IDEs
.vscode/
.idea/
*.swp
*.swo
*~

# Environment variables
.env
.env.local
.env.*.local

# Testing
.coverage
.pytest_cache/
htmlcov/
.tox/

# Node
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# OS
.DS_Store
Thumbs.db

# Logs
*.log
logs/
`;
}

function generateEnvExample(config: ProjectConfig): string {
  return `# Application
APP_NAME="${config.projectName}"
APP_ENV=development
DEBUG=True
${config.framework.startsWith('fastapi') ? 'HOST=0.0.0.0\nPORT=8000' : 'PORT=3000'}

# Database${
    config.selectedModules.includes('database') ||
    config.selectedModules.includes('database-orm-pro')
      ? `
DATABASE_URL=postgresql://user:password@localhost:5432/${config.projectName}
# or for SQLite:
# DATABASE_URL=sqlite:///./database.db`
      : `
# DATABASE_URL=postgresql://user:password@localhost:5432/${config.projectName}`
  }

# Authentication${
    config.selectedModules.includes('auth')
      ? `
JWT_SECRET=your-secret-key-here-change-in-production
JWT_ALGORITHM=HS256
JWT_EXPIRATION=3600`
      : `
# JWT_SECRET=your-secret-key-here`
  }

# Redis${
    config.selectedModules.includes('cache')
      ? `
REDIS_URL=redis://localhost:6379/0`
      : `
# REDIS_URL=redis://localhost:6379/0`
  }

# Email${
    config.selectedModules.includes('email')
      ? `
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASSWORD=your-app-password
EMAIL_FROM=noreply@${config.projectName}.com`
      : `
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587`
  }

# AWS S3${
    config.selectedModules.includes('storage')
      ? `
AWS_ACCESS_KEY_ID=your-access-key
AWS_SECRET_ACCESS_KEY=your-secret-key
AWS_REGION=us-east-1
S3_BUCKET_NAME=your-bucket-name`
      : `
# AWS_ACCESS_KEY_ID=your-access-key
# AWS_SECRET_ACCESS_KEY=your-secret-key`
  }
`;
}

function generatePyProjectToml(config: ProjectConfig): string {
  const dependencies = [
    'fastapi = "^0.115.0"',
    'uvicorn = { extras = ["standard"], version = "^0.32.0" }',
    'pydantic = "^2.9.0"',
    'pydantic-settings = "^2.5.0"',
  ];

  if (
    config.selectedModules.includes('database') ||
    config.selectedModules.includes('database-orm-pro')
  ) {
    dependencies.push('sqlalchemy = "^2.0.0"', 'alembic = "^1.13.0"');
  }
  if (config.selectedModules.includes('auth')) {
    dependencies.push(
      'python-jose = { extras = ["cryptography"], version = "^3.3.0" }',
      'passlib = { extras = ["bcrypt"], version = "^1.7.4" }'
    );
  }
  if (config.selectedModules.includes('cache')) {
    dependencies.push('redis = "^5.0.0"');
  }

  return `[tool.poetry]
name = "${config.projectName}"
version = "0.1.0"
description = "Generated by RapidKit"
authors = ["Your Name <you@example.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^${config.pythonVersion}"
${dependencies.join('\n')}

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.0"
pytest-asyncio = "^0.24.0"
httpx = "^0.27.0"
black = "^24.8.0"
flake8 = "^7.1.0"
mypy = "^1.11.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ["py${config.pythonVersion.replace('.', '')}"]

[tool.mypy]
python_version = "${config.pythonVersion}"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
`;
}

function generateRequirementsTxt(config: ProjectConfig): string {
  const deps = [
    'fastapi>=0.115.0',
    'uvicorn[standard]>=0.32.0',
    'pydantic>=2.9.0',
    'pydantic-settings>=2.5.0',
  ];

  if (
    config.selectedModules.includes('database') ||
    config.selectedModules.includes('database-orm-pro')
  ) {
    deps.push('sqlalchemy>=2.0.0', 'alembic>=1.13.0');
  }
  if (config.selectedModules.includes('auth')) {
    deps.push('python-jose[cryptography]>=3.3.0', 'passlib[bcrypt]>=1.7.4');
  }
  if (config.selectedModules.includes('cache')) {
    deps.push('redis>=5.0.0');
  }

  return deps.join('\n') + '\n';
}

function generateSetupPy(config: ProjectConfig): string {
  return `from setuptools import setup, find_packages

setup(
    name="${config.projectName}",
    version="0.1.0",
    description="Generated by RapidKit",
    packages=find_packages(),
    python_requires=">=${config.pythonVersion}",
)
`;
}

function generateMainPy(config: ProjectConfig): string {
  return `from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from src.config import settings
from src.api.routes import api_router

app = FastAPI(
    title=settings.APP_NAME,
    description="Generated by RapidKit",
    version="0.1.0",
    docs_url="/docs",
    redoc_url="/redoc",
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Update in production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Include routers
app.include_router(api_router, prefix="/api")

@app.get("/")
async def root():
    return {
        "message": "Welcome to ${config.projectName}",
        "status": "running",
        "docs": "/docs",
    }

@app.get("/health")
async def health_check():
    return {"status": "healthy"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
`;
}

function generateConfigPy(config: ProjectConfig): string {
  return `from pydantic_settings import BaseSettings

class Settings(BaseSettings):
    APP_NAME: str = "${config.projectName}"
    APP_ENV: str = "development"
    DEBUG: bool = True
    HOST: str = "0.0.0.0"
    PORT: int = 8000
    
    ${
      config.selectedModules.includes('database') ||
      config.selectedModules.includes('database-orm-pro')
        ? 'DATABASE_URL: str = "sqlite:///./database.db"'
        : '# DATABASE_URL: str = ""'
    }
    
    ${
      config.selectedModules.includes('auth')
        ? `JWT_SECRET: str = "your-secret-key"
    JWT_ALGORITHM: str = "HS256"
    JWT_EXPIRATION: int = 3600`
        : '# JWT_SECRET: str = ""'
    }
    
    class Config:
        env_file = ".env"
        case_sensitive = True

settings = Settings()
`;
}

function generateDatabasePy(config: ProjectConfig): string {
  if (
    !config.selectedModules.includes('database') &&
    !config.selectedModules.includes('database-orm-pro')
  ) {
    return '# Database configuration will be added when database module is included\n';
  }

  return `from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from src.config import settings

engine = create_engine(
    settings.DATABASE_URL,
    connect_args={"check_same_thread": False} if "sqlite" in settings.DATABASE_URL else {},
)

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
`;
}

function generateDependenciesPy(config: ProjectConfig): string {
  return `from typing import Generator
from fastapi import Depends, HTTPException, status
${
  config.selectedModules.includes('database') || config.selectedModules.includes('database-orm-pro')
    ? 'from sqlalchemy.orm import Session\nfrom src.core.database import get_db'
    : ''
}

# Add your dependencies here
`;
}

function generateRoutesPy(config: ProjectConfig): string {
  return `from fastapi import APIRouter

api_router = APIRouter()

@api_router.get("/status")
async def status():
    return {"status": "ok", "message": "API is running"}

# Import and include module routers here
${config.selectedModules.map((m) => `# from src.${m}.routes import router as ${m}_router\n# api_router.include_router(${m}_router, prefix="/${m}", tags=["${m}"])`).join('\n')}
`;
}

function generateModuleFiles(moduleSlug: string, _config: ProjectConfig): Record<string, string> {
  const files: Record<string, string> = {};
  const moduleName = moduleSlug.replace(/-/g, '_');

  files[`src/${moduleName}/__init__.py`] = '';
  files[`src/${moduleName}/models.py`] = `# ${moduleSlug} models\n`;
  files[`src/${moduleName}/schemas.py`] =
    `# ${moduleSlug} schemas\nfrom pydantic import BaseModel\n`;
  files[`src/${moduleName}/routes.py`] =
    `# ${moduleSlug} routes\nfrom fastapi import APIRouter\n\nrouter = APIRouter()\n`;
  files[`src/${moduleName}/services.py`] = `# ${moduleSlug} services\n`;

  return files;
}

// NestJS generators
function generatePackageJson(config: ProjectConfig): string {
  return `{
  "name": "${config.projectName}",
  "version": "0.1.0",
  "description": "Generated by RapidKit",
  "author": "",
  "private": true,
  "license": "MIT",
  "scripts": {
    "build": "nest build",
    "format": "prettier --write \\"src/**/*.ts\\"",
    "start": "nest start",
    "start:dev": "nest start --watch",
    "start:debug": "nest start --debug --watch",
    "start:prod": "node dist/main",
    "lint": "eslint \\"{src,apps,libs,test}/**/*.ts\\" --fix",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:e2e": "jest --config ./test/jest-e2e.json"
  },
  "dependencies": {
    "@nestjs/common": "^10.0.0",
    "@nestjs/core": "^10.0.0",
    "@nestjs/platform-express": "^10.0.0",
    "reflect-metadata": "^0.2.0",
    "rxjs": "^7.8.1"
  },
  "devDependencies": {
    "@nestjs/cli": "^10.0.0",
    "@nestjs/schematics": "^10.0.0",
    "@nestjs/testing": "^10.0.0",
    "@types/express": "^4.17.17",
    "@types/jest": "^29.5.2",
    "@types/node": "^20.3.1",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "eslint": "^8.42.0",
    "jest": "^29.5.0",
    "prettier": "^3.0.0",
    "ts-jest": "^29.1.0",
    "ts-loader": "^9.4.3",
    "ts-node": "^10.9.1",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.1.3"
  }
}
`;
}

function generateTsConfig(): string {
  return `{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "removeComments": true,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "target": "ES2021",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./",
    "incremental": true,
    "skipLibCheck": true,
    "strictNullChecks": false,
    "noImplicitAny": false,
    "strictBindCallApply": false,
    "forceConsistentCasingInFileNames": false,
    "noFallthroughCasesInSwitch": false
  }
}
`;
}

function generateNestCliJson(): string {
  return `{
  "$schema": "https://json.schemastore.org/nest-cli",
  "collection": "@nestjs/schematics",
  "sourceRoot": "src",
  "compilerOptions": {
    "deleteOutDir": true
  }
}
`;
}

function generateMainTs(_config: ProjectConfig): string {
  return `import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  app.enableCors();
  await app.listen(3000);
  console.log(\`Application is running on: \${await app.getUrl()}\`);
}
bootstrap();
`;
}

function generateAppModule(_config: ProjectConfig): string {
  return `import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';

@Module({
  imports: [],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}
`;
}

function generateAppController(): string {
  return `import { Controller, Get } from '@nestjs/common';
import { AppService } from './app.service';

@Controller()
export class AppController {
  constructor(private readonly appService: AppService) {}

  @Get()
  getHello(): string {
    return this.appService.getHello();
  }

  @Get('health')
  healthCheck() {
    return { status: 'healthy' };
  }
}
`;
}

function generateAppService(): string {
  return `import { Injectable } from '@nestjs/common';

@Injectable()
export class AppService {
  getHello(): string {
    return 'Welcome to your NestJS application!';
  }
}
`;
}

// Docker files
function generateDockerfile(config: ProjectConfig): string {
  if (config.framework.startsWith('fastapi')) {
    return `FROM python:${config.pythonVersion}-slim

WORKDIR /app

# Install dependencies
${
  config.packageManager === 'poetry'
    ? `RUN pip install poetry
COPY pyproject.toml poetry.lock* ./
RUN poetry config virtualenvs.create false && poetry install --no-dev --no-interaction --no-ansi`
    : `COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt`
}

# Copy application
COPY . .

EXPOSE 8000

CMD ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000"]
`;
  } else {
    return `FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm ci --only=production

COPY . .
RUN npm run build

EXPOSE 3000

CMD ["node", "dist/main"]
`;
  }
}

function generateDockerCompose(config: ProjectConfig): string {
  const hasDatabase =
    config.selectedModules.includes('database') ||
    config.selectedModules.includes('database-orm-pro');
  const hasCache = config.selectedModules.includes('cache');

  return `version: '3.8'

services:
  app:
    build: .
    ports:
      - "${config.framework.startsWith('fastapi') ? '8000:8000' : '3000:3000'}"
    environment:
      - APP_ENV=production
${hasDatabase ? `      - DATABASE_URL=postgresql://postgres:postgres@db:5432/${config.projectName}` : ''}
${hasCache ? '      - REDIS_URL=redis://redis:6379/0' : ''}
    depends_on:
${hasDatabase ? '      - db' : ''}
${hasCache ? '      - redis' : ''}
    volumes:
      - .:/app
${
  hasDatabase
    ? `
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=${config.projectName}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data`
    : ''
}
${
  hasCache
    ? `
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"`
    : ''
}

${
  hasDatabase || hasCache
    ? `volumes:${hasDatabase ? '\n  postgres_data:' : ''}${hasCache ? '\n  redis_data:' : ''}`
    : ''
}
`;
}

function generateDockerignore(): string {
  return `__pycache__
*.pyc
*.pyo
*.pyd
.Python
env
venv
.venv
node_modules
.git
.gitignore
.dockerignore
.env
.env.local
*.log
.pytest_cache
.coverage
htmlcov
dist
build
*.egg-info
`;
}

// Testing files
function generateConftestPy(_config: ProjectConfig): string {
  return `import pytest
from fastapi.testclient import TestClient
from src.main import app

@pytest.fixture
def client():
    with TestClient(app) as c:
        yield c
`;
}

function generateTestMainPy(_config: ProjectConfig): string {
  return `def test_root(client):
    response = client.get("/")
    assert response.status_code == 200
    assert "message" in response.json()

def test_health_check(client):
    response = client.get("/health")
    assert response.status_code == 200
    assert response.json() == {"status": "healthy"}
`;
}

function generatePytestIni(): string {
  return `[pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = -v --tb=short
`;
}

function generateE2ETest(): string {
  return `import { Test, TestingModule } from '@nestjs/testing';
import { INestApplication } from '@nestjs/common';
import * as request from 'supertest';
import { AppModule } from './../src/app.module';

describe('AppController (e2e)', () => {
  let app: INestApplication;

  beforeEach(async () => {
    const moduleFixture: TestingModule = await Test.createTestingModule({
      imports: [AppModule],
    }).compile();

    app = moduleFixture.createNestApplication();
    await app.init();
  });

  it('/ (GET)', () => {
    return request(app.getHttpServer())
      .get('/')
      .expect(200)
      .expect('Welcome to your NestJS application!');
  });
});
`;
}

function generateJestE2EConfig(): string {
  return `{
  "moduleFileExtensions": ["js", "json", "ts"],
  "rootDir": ".",
  "testEnvironment": "node",
  "testRegex": ".e2e-spec.ts$",
  "transform": {
    "^.+\\\\.(t|j)s$": "ts-jest"
  }
}
`;
}

// CI/CD
function generateGitHubActions(config: ProjectConfig): string {
  if (config.framework.startsWith('fastapi')) {
    return `name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${config.pythonVersion}
      uses: actions/setup-python@v4
      with:
        python-version: ${config.pythonVersion}
    
    - name: Install dependencies
      run: |
        ${
          config.packageManager === 'poetry'
            ? 'pip install poetry\npoetry install'
            : 'pip install -r requirements.txt'
        }
    
    - name: Run tests
      run: |
        ${config.packageManager === 'poetry' ? 'poetry run pytest' : 'pytest'}
    
    - name: Lint with flake8
      run: |
        ${config.packageManager === 'poetry' ? 'poetry run flake8 src' : 'flake8 src'}
`;
  } else {
    return `name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
    
    - name: Build
      run: npm run build
`;
  }
}
