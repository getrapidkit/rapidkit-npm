name: fastapi.standard
category: fastapi
display_name: FastAPI Standard Kit
description: Minimal FastAPI starter that defers features to RapidKit modules.
version: 0.1.0
min_rapidkit_version: 0.1.0
tier: standard
repo_url: https://github.com/getrapidkit/core.git
repo_branch: main
tags: [fastapi, modular, minimal]
support: standard
license: Apache-2.0

module_support:
  free: true
  paid: true
  community: true
  enterprise: true

environments:
  development:
    debug: true
    description: "Development environment with hot reload"
  production:
    debug: false
    description: "Production environment optimized for performance"

variables:
  project_name:
    type: string
    required: true
    description: "Name of your project (snake_case recommended)"
    validation:
      pattern: "^[a-z][a-z0-9_]*$"
      max_length: 50

  author:
    type: string
    default: "{{ getpass.getuser() }}"
    description: "Project author name"

  description:
    type: string
    default: "FastAPI service generated with RapidKit"
    description: "Project description"

  app_version:
    type: string
    default: "0.1.0"
    description: "Application version"

  license:
    type: choice
    choices: [MIT, Apache-2.0, GPL-3.0, Proprietary]
    default: Apache-2.0
    description: "Project license"

structure:
  - path: src/
    type: folder
  - path: src/main.py
    template: src/main.py.j2
  - path: src/__init__.py
    template: src/__init__.py.j2
  - path: src/cli.py
    template: src/cli.py.j2
  - path: src/routing/__init__.py
    template: src/routing/__init__.py.j2
  - path: src/routing/health.py
    template: src/routing/health.py.j2
  - path: src/modules/__init__.py
    template: src/modules/__init__.py.j2
  - path: tests/
    type: folder
  - path: tests/__init__.py
    template: tests/__init__.py.j2
  - path: README.md
    template: README.md.j2
  - path: .gitignore
    template: .gitignore.j2
  - path: pyproject.toml
    template: pyproject.toml.j2

injection_points:
  imports:
    - file: src/main.py
      anchor: "# <<<inject:imports>>>"
      description: "Additional imports supplied by modules"
  startup_hooks:
    - file: src/main.py
      anchor: "# <<<inject:startup>>>"
      description: "Asynchronous startup tasks"
  shutdown_hooks:
    - file: src/main.py
      anchor: "# <<<inject:shutdown>>>"
      description: "Asynchronous shutdown tasks"
  router_includes:
    - file: src/main.py
      anchor: "# <<<inject:routes>>>"
      description: "Register API routers from modules"
  module_init:
    - file: src/modules/__init__.py
      anchor: "# <<<inject:module-init>>>"
      description: "Module bootstrapping logic"
  router_registration:
    - file: src/routing/__init__.py
      anchor: "# <<<inject:router-imports>>>"
      description: "Import routers provided by modules"
  router_mount:
    - file: src/routing/__init__.py
      anchor: "# <<<inject:router-mount>>>"
      description: "Attach module routers to api_router"
  poetry_dependencies:
    - file: pyproject.toml
      anchor: "# <<<inject:poetry-dependencies>>>"
      description: "Add dependencies contributed by modules"

hooks:
  pre_generate: pre_generate
  post_generate: post_generate
